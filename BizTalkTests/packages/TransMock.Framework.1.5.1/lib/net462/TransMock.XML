<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TransMock</name>
    </assembly>
    <members>
        <member name="T:TransMock.Addressing.EndpointAddress">
            <summary>
            Base abstract class for all endpoint addresses which defines the common behaviour.
            All the classes that derived trom this class are used in the <see cref="T:TransMock.EndpointsMock`1"/> class' 
            Setup methods in conjunction with the concreate TAddresses implementation to scope setting up only allowed
            addresses for the given messaging pattern. The concrete TAddresses class is an instance of a class MockAddresses
            class generated by the mockfier.
            For instance in the case of SetupReceive method there can only be specivied properties from the MockAddresses* class
            that are of type ReceiveEndpointAddress. This way the programing model is becoming in a way strongly typed in terms of the 
            address definitions for the mocked endpoints and hence any errors that were previously encountered based on wrongly pointing
            to incompatible mocked endpoint are now history.
            </summary>    
        </member>
        <member name="M:TransMock.Addressing.EndpointAddress.#ctor">
            <summary>
            Creates an instance of the <see cref="T:TransMock.Addressing.EndpointAddress"/> through inheritance only
            </summary>
        </member>
        <member name="T:TransMock.Addressing.OneWayReceiveAddress">
            <summary>
            Describes the address of a 1-way receive endpoint
            </summary>
        </member>
        <member name="T:TransMock.Addressing.OneWaySendAddress">
            <summary>
            Describes the address of a 1-way send endpoint
            </summary>
        </member>
        <member name="T:TransMock.Addressing.TwoWayReceiveAddress">
            <summary>
            Describes the address of a 1-way receive endpoint
            </summary>
        </member>
        <member name="T:TransMock.Addressing.TwoWaySendAddress">
            <summary>
            Type for enforcing a 2 way send address behavior
            </summary>
        </member>
        <member name="T:TransMock.SerialStaticFilesResponseSelector">
            <summary>
            This class implements behavior of selecting multiple responses from static files in a serial manner
            applicable for situations where the same mocked endpoint instance is called multiple times f.ex in a loop,
            and for each call a different response is required
            </summary>
        </member>
        <member name="P:TransMock.SerialStaticFilesResponseSelector.FilePaths">
            <summary>
            Gets or sets a list of file paths that shall be used to populate response messages
            </summary>
        </member>
        <member name="M:TransMock.SerialStaticFilesResponseSelector.#ctor">
            <summary>
            Creates an instance of <see cref="T:TransMock.SerialStaticFilesResponseSelector"/> class
            </summary>
        </member>
        <member name="M:TransMock.SerialStaticFilesResponseSelector.SelectResponseMessage(System.Int32,TransMock.Communication.NamedPipes.MockMessage)">
            <summary>
            Selects the response message from the provided request message and its zero based reception index
            </summary>
            <param name="requestIndex">Zero base index indicating the order of reception of the message</param>
            <param name="requestMessage">The actual request message</param>
            <returns></returns>
        </member>
        <member name="T:TransMock.TestMessagingClient`1">
            <summary>
            This class implements the logic for exchanging test messages with the counterpart service endpoints represented by a <see cref="!:EndpointsMock"/> instance.
            This class is abstract and cannot be created directly but rather through a factory method from the <see cref="!:EndpointsMock"/> isntance it is
            intended to be used against. The communication with the enpoint mocks is based on inversed messaging pattern:
            Send operation from the this class corresponds to a receive endpoint in the related <see cref="!:EndpointsMock"/> instance.
            Receive operation in this class corresponds to a send endpoint in the related <see cref="!:EndpointsMock"/> instance.
            Same applies for 2-way communication.
            </summary>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.#ctor">
            <summary>
            Creates a default instance of the <see cref="T:TransMock.TestMessagingClient`1"/>
            </summary>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.#ctor(TransMock.EndpointsMock{`0})">
            <summary>
            Creates an instance of the <see cref="T:TransMock.TestMessagingClient`1"/> class for the provided <see cref="T:TransMock.EndpointsMock`1"/> instance
            </summary>
            <param name="endpointsMock"></param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.WireUp">
            <summary>
            Wires up this client to the endpoints of the corresponding <see cref="!:EndpointsMock"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SetupReceive(TransMock.SendEndpoint)">
            <summary>
            Sets up a receive operation against a pre-defined service send endpoint
            </summary>
            <param name="sendEndpoint">The service send endpoint from which messages will be received</param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SetupSend(TransMock.ReceiveEndpoint)">
            <summary>
            Sets up a send operation against a service receive endpoint
            </summary>
            <param name="receiveEndpoint">The service receive endpoint to which messages shall be sent</param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SetupReceiveRequestAndSendResponse(TransMock.TwoWaySendEndpoint)">
            <summary>
            Sets up a 2-way receive operation for a corresponding 2-way service send endpoint
            </summary>
            <param name="sendReceiveEndpoint">The 2-way service send endpoint from which requests shall be received and responses sent to</param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SetupSendRequestAndReceiveResponse(TransMock.TwoWayReceiveEndpoint)">
            <summary>
            Sets up a 2-way send operation for corresponding 2-way service recieve endpoint
            </summary>
            <param name="receiveSendEndpoint">The 2-way service receive endpoing to whcih requests shall be sent and responses received from</param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.TearDown">
            <summary>
            Tears down the operations that are set up for this mock isntance
            </summary>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.MockMessageServer_ReadCompleted(System.Object,TransMock.Communication.NamedPipes.AsyncReadEventArgs)">
            <summary>
            Event handler for receiving messages by mocked receive endpoints.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.Receive(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.OneWaySendAddress}},System.Int32,System.Int32,System.Text.Encoding,System.Action{TransMock.TestContext},System.Action{TransMock.TestContext},System.Func{TransMock.IndexedMessageReception,System.Boolean})">
            <summary>
            Receive messages from a corresponding 1-way service endpoint. Supports serially receive of multiple messages in the same instance
            </summary>
            <param name="sendAddress">The address of the service endpoint from which messages will be received</param>
            <param name="timeoutInSeconds">Timeout in seconds for waiting for connection from the send endpoint. Default is 10.</param>
            <param name="expectedMessageCount">The number of expected messages from the service send endpoint. Default is 1.</param>
            <param name="messageEncoding">The expected encoding of the messages contents. Default is UTF-8</param>
            <param name="beforeReceiveAction">An action against the test context. Optional.</param>
            <param name="validator">A function performing validation logic on a single received message. Optional</param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.Send(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.OneWayReceiveAddress}},System.String,System.Text.Encoding,System.Int32,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.Action{TransMock.TestContext},System.Action{TransMock.TestContext})">
            <summary>
            Sends a one-way message to a corresponding receive endpoint represented by its receiving address
            </summary>
            <param name="receivingAddress">The address of the one way receiving end point that will receive the message being sent</param>
            <param name="requestFile">The path to the file containing the request</param>
            <param name="messageEncoding">The encoding of the message contents.Default is UTF-8</param>
            <param name="timeoutInSeconds">Timeout in seconds to wait for connection to the receive endpoint.Default is 10</param>
            <param name="messagePropertiesSetter">An optional action for setting message properties for promotion</param>
            <param name="beforeSendAction">An optional action on the test context before sending a message</param>
            <param name="afterSendAction">An optional action on the test context after a message was sent</param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.ReceiveRequestAndSendResponse(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.TwoWaySendAddress}},System.Func{TransMock.Communication.NamedPipes.MockMessage,TransMock.ResponseSelectionStrategy},System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.Int32,System.Int32,System.Text.Encoding,System.Action{TransMock.TestContext},System.Func{TransMock.IndexedMessageReception,System.Boolean},System.Action{TransMock.TestContext},System.Action{TransMock.TestContext})">
            <summary>
            Receives a request from an endpoint with the specified senderAddress instance, optionally validates the request 
            and sends then a response as per the defined response selector method
            </summary>
            <param name="senderAddress">The corresponding 2-way sending endpoint address</param>
            <param name="responseSelector">The desired response selector function</param>
            <param name="responsePropertiesSetter">Function for setting message context properties in the response message</param>
            <param name="timeoutInSeconds">Timeout in seconds. Default is 30</param>
            <param name="expectedMessageCount">Expected message count. Default is 1</param>
            <param name="messageEncoding">Expected request and ersponse messages encoding. Default is UTF-8</param>
            <param name="beforeRequestAction">Action for performing operations against the test context</param>
            <param name="requestValidator">Function for performing validation logic on the request MocMessage instance</param>
            <param name="afterRequestAction">An optional action that can be performed after the request was sent</param>
            <param name="afterResponseAction">An optional action that can be performed after the reresponse was received</param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SendRequestAndReceiveResponse(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.TwoWayReceiveAddress}},System.String,System.Text.Encoding,System.Int32,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.Action{TransMock.TestContext},System.Func{TransMock.Communication.NamedPipes.MockMessage,System.Boolean},System.Action{TransMock.TestContext},System.Action{TransMock.TestContext})">
            <summary>
            Sends a request and receives a response from a corresponding 2-way service receive endpoint represented by its address
            </summary>
            <param name="receivingAddress">The address of the corresponding 2-way service receive location to where requests will be sent and responses recieved</param>
            <param name="requestFilePath">The path to the file that contains the request contents</param>
            <param name="messageEncoding">The encodings of the request and send messages. Default is UTF-8</param>
            <param name="timeoutInSeconds">Timeout is seconds for waiting for connection to the recieve endpoint.Default is 10.</param>
            <param name="messagePropertiesSetter">An optional action for setting custom message properties in the request message</param>
            <param name="beforeRequestAction">An optional action to be performed on the test context</param>
            <param name="responseValidator">An optional response validator</param>
            <param name="afterRequestAction">An optional action that can be performed after the request was sent</param>
            <param name="afterResponseAction">An optional action that can be performed after the reresponse was received</param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.InParallel(System.Func{TransMock.TestMessagingClient{`0},TransMock.TestMessagingClient{`0}}[])">
            <summary>
            Configures mock operations to be executed in parallel to the main test execution thread.
            Each configured operation is executed in a separate task.
            </summary>
            <param name="parallelActions">A params array of send and receive operations to be executed in parallel</param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.VerifyParallel">
            <summary>
            Verifies that all configured parallel operations have completed.
            In case some experienced an error the corresponding exception will be
            logged for further troubleshooting
            </summary>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.ReceiveImplementation(System.Func{TransMock.TestContext,`0,TransMock.SendEndpoint},System.Func{TransMock.IndexedMessageReception,System.Boolean},System.Func{TransMock.Communication.NamedPipes.MockMessage,TransMock.ResponseSelectionStrategy},System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.Action{TransMock.MessageOperationConfig,TransMock.ResponseSelectionStrategy,System.Int32,System.Int32,TransMock.Communication.NamedPipes.MockMessage,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}}},System.Action{TransMock.TestContext},System.Action{TransMock.TestContext})">
            <summary>
            This is the implementation method of the Receive operation
            </summary>
            <param name="sender">A function implementing the logic for configuring the send point</param>
            <param name="validator">A function for performing validation logic on the received message</param>
            <param name="responseSelector">A function for performing response selection logic. Default is null for one way receives</param>
            <param name="responsePropertiesSetter">An optional action that allows for adding custom properties to the response message</param>
            <param name="responseSender">A function for performing response send logic. Default is null for one-way receives</param>
            <param name="afterReceiveAction">An action for performing an operation after the request is received</param>
            <param name="afterSendAction"></param>
            <returns>The current instanse of the TestMessagingClient</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.SendImplementation(System.Func{TransMock.TestContext,`0,TransMock.ReceiveEndpoint},System.Action{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{TransMock.Communication.NamedPipes.MockMessage,System.Boolean},System.Func{TransMock.MessageOperationConfig,TransMock.Communication.NamedPipes.MockMessage},System.Action{TransMock.TestContext},System.Action{TransMock.TestContext})">
            <summary>
            Implements the logic for sending a message to a corespongind receive endpoint and optionally receiving a response
            </summary>
            <param name="receiver">A function performing logic for configuring the corresponding receive endpoint details</param>
            <param name="messagePropertiesSetter">An optional function that receives an empty dictionary and returns is populated with 
            message properties for promotion</param>
            <param name="validator">An optional function performing validation on the received response in a 2/way scenario</param>
            <param name="responseReceiver">An optional function that receives a response in a 2-way scenario</param>
            <param name="afterSendAction">An optional action that can be performed after a message has beend sent</param>
            <param name="afterReceiveAction">An optional action that can be performed after a response message was received</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TransMock.TestMessagingClient`1.SendResponse(TransMock.MessageOperationConfig,TransMock.ResponseSelectionStrategy,System.Int32,System.Int32,TransMock.Communication.NamedPipes.MockMessage,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})" -->
        <member name="M:TransMock.TestMessagingClient`1.ReceiveResponse(TransMock.MessageOperationConfig)">
            <summary>
            Internal implementatino of the receive response logic from a corersponding 2-way service receive endpoint
            </summary>
            <returns>An instance of the <see cref="T:TransMock.Communication.NamedPipes.MockMessage"/> class representing the received response</returns>
        </member>
        <member name="M:TransMock.TestMessagingClient`1.LogMessageContents(TransMock.Communication.NamedPipes.MockMessage)">
            <summary>
            Logs the message contents to the configured trace output
            </summary>
            <param name="message">The mock message instance to be logged</param>
        </member>
        <member name="T:TransMock.MessageOperationConfig">
            <summary>
            Defines the requres properties for an operation against a mocked endpoint
            </summary>
        </member>
        <member name="T:TransMock.MockedEndpoint">
            <summary>
            Describes a mocked endpoint by defining its basic properties
            </summary>
        </member>
        <member name="P:TransMock.MockedEndpoint.URL">
            <summary>
            The URL of the endpoint
            </summary>
        </member>
        <member name="P:TransMock.MockedEndpoint.TimeoutInSeconds">
            <summary>
            The timeout in seconds to wait for connection to/from the endpoint
            </summary>
        </member>
        <member name="P:TransMock.MockedEndpoint.MessageEncoding">
            <summary>
            The expected encoding of the messages communicated to/from the endpoint
            </summary>
        </member>
        <member name="T:TransMock.ReceiveEndpoint">
            <summary>
            Defines a 1/way receive mock endpoint
            </summary>
        </member>
        <member name="T:TransMock.ResponseSelectionStrategy">
            <summary>
            A strategy describing the way to select a response for a message receievd from a mocked service
            in a 2-way communication scenario
            </summary>
        </member>
        <member name="T:TransMock.SendEndpoint">
            <summary>
            Represents a 1-way send mocked endpoint
            </summary>
        </member>
        <member name="T:TransMock.StaticFileResponseSelector">
            <summary>
            This class implements the logic for fetching the response contents from a static file
            </summary>
        </member>
        <member name="P:TransMock.StaticFileResponseSelector.FilePath">
            <summary>
            The path to the file which will be used to populate the responce mock message contents
            </summary>
        </member>
        <member name="M:TransMock.StaticFileResponseSelector.SelectResponseMessage(System.Int32,TransMock.Communication.NamedPipes.MockMessage)">
            <summary>
            Reads the contents of the file provided in the FilePath property and returns an instance
            of the <see cref="T:TransMock.Communication.NamedPipes.MockMessage" /> class initialized with this contents
            </summary>
            <param name="requestIndex">The index of the request in a multi-request scenario</param>
            <param name="requestMessage">The request message</param>
            <returns>An instance of <see cref="T:TransMock.Communication.NamedPipes.MockMessage" /> class with contents taken from the file specified in the FilePath property</returns>
        </member>
        <member name="T:TransMock.EndpointsMock`1">
            <summary>
            This class represents a mock of a service/integration implementation from its endpoints point of view and it is set up once for a test suite.
            This is because a service/integration flow has a finite and predictable set of receive and send endpoints.
            What varies during execution is the messages received over/sent to a given endpoint instance.
            This behavior is driven by the <see cref="T:TransMock.TestMessagingClient`1"/> class from where the corresponding messaging operations are performed.
            This is why the Setup methods match the direction of the message flow, e.g. SetupReceive is setting up a receive
            endpoint and vice versa.
            </summary>
        </member>
        <member name="M:TransMock.EndpointsMock`1.#ctor">
            <summary>
            Creates an instance of the <see cref="T:TransMock.EndpointsMock`1"/> class
            </summary>
        </member>
        <member name="M:TransMock.EndpointsMock`1.SetupReceive(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.OneWayReceiveAddress}})">
            <summary>
            The func in the expression is hardcoded to return strings, as the Mock addresses class has only 
            getters of type string
            </summary>
            <param name="receiver"></param>
            <returns>The current instance of the <see cref="T:TransMock.EndpointsMock`1"/> class</returns>
        </member>
        <member name="M:TransMock.EndpointsMock`1.SetupSend(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.OneWaySendAddress}})">
            <summary>
            Sets up a mock for a send endpoint
            </summary>
            <param name="sender">An expression that returns the address of the send endpoint</param>
            <returns>The current instance of the <see cref="T:TransMock.EndpointsMock`1"/> class</returns>
        </member>
        <member name="M:TransMock.EndpointsMock`1.SetupReceiveRequestAndSendResponse(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.TwoWayReceiveAddress}})">
            <summary>
            Sets up a mock for a 2-way receive operation where a request is received and a response is supplied back.
            </summary>
            <param name="receiver">An expression that returns the address of the 2-way receive endpoint</param>
            <returns>The current instance of the <see cref="T:TransMock.EndpointsMock`1"/> class</returns>
        </member>
        <member name="M:TransMock.EndpointsMock`1.SetupSendRequestAndReceiveResponse(System.Linq.Expressions.Expression{System.Func{`0,TransMock.Addressing.TwoWaySendAddress}})">
            <summary>
            Sets up an endpoint that follows 2-way outbound communication pattern - 
            send a request and expects a response synchronously
            </summary>
            <param name="sender">An expression that returns the address of the send endpoint for this operation</param>
            <returns>The current instance of the <see cref="T:TransMock.EndpointsMock`1"/> class</returns>
        </member>
        <member name="M:TransMock.EndpointsMock`1.CreateMessagingClient">
            <summary>
            Creates a <see cref="T:TransMock.TestMessagingClient`1"/> instance that can be used to send messages for testing 
            a service that is represented by this endpoints mock instance
            </summary>
            <returns>An instance of the <see cref="T:TransMock.TestMessagingClient`1"/> class</returns>
        </member>
        <member name="T:TransMock.TestContext">
            <summary>
            Represents test execution context
            </summary>
        </member>
        <member name="T:TransMock.TwoWayReceiveEndpoint">
            <summary>
            Represents a 2-way receive endpoint which receives a request and supplies a response to a corresponding 2-way service send endpoint.
            </summary>
        </member>
        <member name="T:TransMock.IndexedMessageReception">
            <summary>
            This class represents a reception of a mock message with a corresponding index value indicating the order of reception
            </summary>
        </member>
        <member name="P:TransMock.IndexedMessageReception.Index">
            <summary>
            The index of the received message
            </summary>
        </member>
        <member name="P:TransMock.IndexedMessageReception.Message">
            <summary>
            The instance of the mock message that was received
            </summary>
        </member>
    </members>
</doc>
